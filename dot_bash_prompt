#!/bin/bash

prompt_git_nogitstatus() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      # git update-index --refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${blue}${s}";
  else
    return;
  fi;
}

prompt_git_gitstatus() {
  gitstatus_query || return;
  [[ "$VCS_STATUS_RESULT" == ok-sync ]] || return;

  local      reset=$'\e[0m'         # no color
  local      clean=$'\e[38;5;076m'  # green foreground
  local  untracked=$'\e[38;5;014m'  # teal foreground
  local   modified=$'\e[38;5;011m'  # yellow foreground
  local conflicted=$'\e[38;5;196m'  # red foreground

  local p
  p+="${1}"

  local where  # branch name, tag or commit
  if [[ -n "$VCS_STATUS_LOCAL_BRANCH" ]]; then
    where="$VCS_STATUS_LOCAL_BRANCH"
  elif [[ -n "$VCS_STATUS_TAG" ]]; then
    p+="#"
    where="$VCS_STATUS_TAG"
  else
    p+="@"
    where="${VCS_STATUS_COMMIT:0:8}"
  fi

  (( ${#where} > 32 )) && where="${where:0:12}…${where: -12}"  # truncate long branch names and tags
  p+="${where}"

  # ⇣42 if behind the remote.
  (( VCS_STATUS_COMMITS_BEHIND )) && p+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
  # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
  (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && p+=" "
  (( VCS_STATUS_COMMITS_AHEAD  )) && p+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
  # ⇠42 if behind the push remote.
  (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
  (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" "
  # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
  (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && p+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
  # *42 if have stashes.
  (( VCS_STATUS_STASHES        )) && p+=" ${clean}*${VCS_STATUS_STASHES}"
  # 'merge' if the repo is in an unusual state.
  [[ -n "$VCS_STATUS_ACTION"   ]] && p+=" ${conflicted}${VCS_STATUS_ACTION}"
  # ~42 if have merge conflicts.
  (( VCS_STATUS_NUM_CONFLICTED )) && p+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
  # +42 if have staged changes.
  (( VCS_STATUS_NUM_STAGED     )) && p+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
  # !42 if have unstaged changes.
  (( VCS_STATUS_NUM_UNSTAGED   )) && p+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
  # ?42 if have untracked files. It's really a question mark, your font isn't broken.
  (( VCS_STATUS_NUM_UNTRACKED  )) && p+=" ${untracked}?${VCS_STATUS_NUM_UNTRACKED}"

  echo -e "${p}"
}

prompt_shlvl() {
  if [ "$SHLVL" -gt 1 ]; then
    NEST_LEVEL=$((SHLVL - 1))
    if [ "$NEST_LEVEL" -le 5 ]; then
      NEST_MESSAGE=$(printf ">%.0s" $(seq 1 "$NEST_LEVEL"))
    else
      NEST_MESSAGE="nested $NEST_LEVEL"
    fi
    echo -e "${1}[$NEST_MESSAGE]${2}"
  fi
}

prompt_git() {
  if [ "$(type -t gitstatus_query)" == "function" ]; then
    prompt_git_gitstatus "$1"
  else
    prompt_git_nogitstatus "$1"
  fi
}

prompt_venv() {
  if [ -z "$VIRTUAL_ENV" ]; then
    return
  else
    echo -e "${1}($(basename \"$VIRTUAL_ENV\"))"
  fi
}

# Initialize gitstatus if it is installed
if [[ -f "$HOME/.gitstatus/gitstatus.plugin.sh" ]]; then
  source "$HOME/.gitstatus/gitstatus.plugin.sh"
  [[ "$(type -t gitstatus_query)" == "function" ]] && gitstatus_stop && gitstatus_start
fi

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  # OceanicNext colors.
  black=$(tput setaf 235);
  blue=$(tput setaf 68);
  cyan=$(tput setaf 73);
  green=$(tput setaf 114);
  orange=$(tput setaf 209);
  purple=$(tput setaf 125);
  red=$(tput setaf 203);
  violet=$(tput setaf 176);
  white=$(tput setaf 15);
  yellow=$(tput setaf 221);
else
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  orange="\e[1;33m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  white="\e[1;37m";
  yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="${yellow}";
fi;

IS_FIRST_COMMAND=1

custom_prompt() {
  # Set the terminal title to the current working directory.
  PS1="\[\033]0;\w\007\]";

  # Add a newline between commands
  if [ "${IS_FIRST_COMMAND}" == "0" ]; then
    PS1+="\n";
  fi
  IS_FIRST_COMMAND=0

  PS1+="\[${bold}\]";
  PS1+="\$(prompt_shlvl \"${green}\" \" \")"; # Virtualenv details
  PS1+="\[${userStyle}\]\u"; # username
  PS1+="\[${white}\] at ";
  PS1+="\[${hostStyle}\]\h"; # host
  PS1+="\[${white}\] in ";
  PS1+="\[${green}\]\w"; # working directory
  PS1+="\$(prompt_git \" ${white}on ${violet}\")"; # Git repository details
  PS1+="\$(prompt_venv \" ${cyan}\")"; # Virtualenv details
  PS1+="\n";
  PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
  export PS1;

  PS2="\[${yellow}\]→ \[${reset}\]";
  export PS2;
}

PROMPT_COMMAND=custom_prompt
