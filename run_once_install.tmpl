#!/bin/bash
# vim: set ft=sh:

HUMAN_READABLE_SYSTEM_CONFIGURATION='{{ .chezmoi.os }}/{{ .chezmoi.arch }}'
{{ if (eq .chezmoi.os "linux") }}
  HUMAN_READABLE_SYSTEM_CONFIGURATION+=' {{ .chezmoi.osRelease.name }} {{ .chezmoi.osRelease.version }}'
{{ end }}

function cannot() {
  echo "Unsupported system configuration: cannot $@"
  echo "Please extend run_once_install.tmpl for: $HUMAN_READABLE_SYSTEM_CONFIGURATION"
  exit 1
}

### Ubuntu: apt/apt-get wrappers

{{ if (and (eq .chezmoi.os "linux")
           (eq .chezmoi.osRelease.id "ubuntu")) }}
  UBUNTU_VERSION='{{ .chezmoi.osRelease.versionID }}'
{{ end }}

NEED_APT_UPDATE=1

function maybe_apt_update() {
  if [ "$NEED_APT_UPDATE" == "1" ]; then
    if command -v apt &> /dev/null; then
      sudo apt update
    elif command -v apt-get &> /dev/null; then
      sudo apt-get update
    else
      cannot "apt/apt-get update"
    fi
    NEED_APT_UPDATE=0
  fi
}

function add_apt_repository() {
  if command -v add-apt-repository &> /dev/null; then
    sudo add-apt-repository -y "$1"
    NEED_APT_UPDATE=1
  else
    cannot "add apt repository"
  fi
}

function apt_install() {
  maybe_apt_update
  if command -v apt &> /dev/null; then
    sudo apt install -y $@
  elif command -v apt-get &> /dev/null; then
    sudo apt-get install -y $@
  else
    cannot "apt/apt-get install"
  fi
}

### Cross-platform install scripts

function install_gitstatus() {
  if [ ! -e "$HOME/.gitstatus" ]; then
    echo "Installing gitstatus."
    git clone --depth=1 https://github.com/romkatv/gitstatus.git "$HOME/.gitstatus"
  fi
}

function install_grc() {
  {{ if (and (eq .chezmoi.os "linux")
             (eq .chezmoi.osRelease.id "ubuntu")) }}
    apt_install grc
  {{ else }}
    cannot "install grc"
  {{ end }}
}

function install_fzf_git() {
  if [ ! -e "$HOME/.fzf" ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"
    $HOME/.fzf/install \
      --key-bindings \
      --completion \
      --no-update-rc
  fi
}

function install_fzf() {
  {{ if (and (eq .chezmoi.os "linux")
             (eq .chezmoi.osRelease.id "ubuntu")) }}
    if awk "BEGIN { exit !($UBUNTU_VERSION >= 19.10) }" &> /dev/null; then
      # fzf is included in the main repo after 19.10
      apt_install fzf
    else
      # otherwise we'll install it using git
      install_fzf_git
    fi
  {{ else }}
    cannot "install fzf"
  {{ end }}
}

function install_misc_tools() {
  {{ if (and (eq .chezmoi.os "linux")
             (eq .chezmoi.osRelease.id "ubuntu")) }}
    apt_install iftop net-tools nmap pv sysstat traceroute tree
  {{ else }}
    cannot "install misc tools"
  {{ end }}
}

function install_latest_neovim() {
  {{ if (and (eq .chezmoi.os "linux")
             (eq .chezmoi.osRelease.id "ubuntu")) }}
    if awk "BEGIN { exit !($UBUNTU_VERSION >= 16.04) }" &> /dev/null; then
      # the unstable repository has support for 16.04
      add_apt_repository "ppa:neovim-ppa/unstable"
      apt_install neovim
    else
      cannot "install latest neovim"
    fi
  {{ else }}
    cannot "install latest neovim"
  {{ end }}
}

function install_rg() {
  {{ if (and (eq .chezmoi.os "linux")
             (eq .chezmoi.osRelease.id "ubuntu")) }}
    if awk "BEGIN { exit !($UBUNTU_VERSION >= 18.10) }" &> /dev/null; then
      ## ripgrep is included in the main repo after 18.10
      apt_install ripgrep
    elif awk "BEGIN { exit !($UBUNTU_VERSION >= 16.04) }" &> /dev/null; then
      ## otherwise we can install it using snap
      sudo snap install ripgrep --classic
    else
      cannot "install ripgrep"
    fi
  {{ else }}
    cannot "install ripgrep"
  {{ end }}
}

function build_tmux_from_source() {
  local TMUX_VERSION=3.2
  local TMUX_URL="https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz"

  {{ if (and (eq .chezmoi.os "linux")
             (eq .chezmoi.osRelease.id "ubuntu")) }}
    sudo apt-get install -y \
      build-essential bison pkg-config libevent-dev libncurses-dev

    mkdir -p "${HOME}/bin"
    wget -q -O- "${TMUX_URL}" | tar -xz -C "${HOME}/bin/"
    pushd "${HOME}/bin/tmux-${TMUX_VERSION}"
    ./configure && make && sudo make install
    popd
  {{ else }}
    cannot "build tmux from source"
  {{ end }}
}

function upgrade_tmux_if_old() {
  if command -v tmux &> /dev/null; then
    TMUX_VERSION=$(tmux -V | cut -d' ' -f2)
    if awk "BEGIN { exit !($TMUX_VERSION >= 2.6) }" &> /dev/null; then
      return
    fi
  fi

  build_tmux_from_source
}

### Perform the actual installation

set -xe

echo "OS: $HUMAN_READABLE_SYSTEM_CONFIGURATION"
{{ if .install_gitstatus }} install_gitstatus {{ end }}
{{ if .install_grc }} install_grc {{ end }}
{{ if .install_fzf }} install_fzf {{ end }}
{{ if .install_misc_tools }} install_misc_tools {{ end }}
{{ if .install_latest_neovim }} install_latest_neovim {{ end }}
{{ if .install_rg }} install_rg {{ end }}
{{ if .upgrade_tmux_if_old }} upgrade_tmux_if_old {{ end }}
